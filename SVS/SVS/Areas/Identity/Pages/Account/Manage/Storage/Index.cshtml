@page
@model SVS.Areas.Identity.Pages.Account.Manage.Storage.StorageModel
@{
    ViewData["Title"] = "Parcels";
}

<style>
    .parcel-container {
        height: auto;
        left: -20%;
        position: absolute;
        top: -10vh;
    }

    .btn {
        background: rgba(81, 104, 173, 0.95);
        border: 2px solid rgba(0, 0, 0, 0.2);
        border-radius: 5px;
        display: inline-block;
        height: auto;
        outline: none;
        width: auto;
    }

        .btn:hover {
            background: rgba(110, 133, 201, 0.95);
        }

        .btn:focus {
            box-shadow: none;
        }

    .select-css {
        background: transparent;
        background: rgba(6, 26, 87, 0.95);
        border: 3px solid rgba(17, 46, 132, 0.95);
        color: white;
        font-family: 'Lato', sans-serif;
        height: 40px;
        transform: translate(-15%, -20%);
        width: 100px;
    }

        .select-css:focus {
            background-color: rgba(6, 26, 87, 0.95);
            color: white;
        }

    #pagination-wrapper {
        background: rgba(6, 26, 87, 0.95);
        border: 3px solid rgba(17, 46, 132, 0.95);
        border-radius: 5px;
        max-width: 100%;
        padding: 10px;
    }

    .table {
        background: rgba(20, 73, 128, 0.9);
        border-collapse: collapse;
        border-radius: 10px;
        color: white;
        overflow: hidden;
    }

        .table th {
            cursor: pointer;
        }


        .table .th-sort-asc:after {
            content: "\25b4";
        }

        .table .th-sort-desc:after {
            content: "\25be";
        }

        .table .th-sort-asc,
        .table .th-sort-desc {
            background: rgba(35, 65, 158, 0.95);
        }

    table, td, th {
        border: 1px solid rgba(255, 255, 255, 0.2);
        min-width: 105Px;
    }

        table .actions {
            min-width: 200px;
        }

    .table .names {
        background: rgba(18, 43, 120, 0.95);
        text-align: center;
    }

    .table .action {
        color: rgb(134, 174, 219);
    }

    .table .delete {
        color: rgb(255, 107, 107);
    }

    .table .results {
        color: rgb(233, 245, 254);
    }
</style>


<div class="parcel-container">
    <div class="container" style="margin-top: 35px">
        <div class="form-group">
            <select name="state" id="maxRows" class="select-css">
                <option value="5000">Show All</option>
                <option value="5">5</option>
                <option value="15">15</option>
                <option value="20">20</option>
                <option value="50">50</option>
                <option value="75">75</option>
                <option value="100">100</option>
            </select>
        </div>
    </div>
    <table class="table" data-page-size="3" data-paging="true">
        <thead>
            <tr class="names">
                <th class="number">
                    @Html.DisplayNameFor(model => model.Parcel[0].Number)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Parcel[0].ID)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Parcel[0].Weight)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Parcel[0].Length)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Parcel[0].Width)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Parcel[0].Height)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Parcel[0].Fragile)
                </th>
                <th>
                    Size
                </th>
                <th class="actions">
                    Actions
                </th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model.Parcel)
            {
                if (User.IsInRole("Admin"))
                {
                    <tr class="results">
                        <td>
                            @Html.DisplayFor(modelItem => item.Number)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.ID)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Weight)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Length)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Width)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Height)
                        </td>
                        <td>
                            @Model.IsFragile(item)
                        </td>
                        <td>
                            @item.Size
                        </td>
                        <td>
                            <a class="action" asp-page="./Edit" asp-route-id="@item.ID">Edit</a>
                            <span>|</span>
                            <a class="action" asp-page="./Details" asp-route-id="@item.ID">Details</a>
                            <span>|</span>
                            <a class="delete" onclick="return confirm('Delete Parcel? @item.ID')"
                               asp-page="./Delete" asp-route-id="@item.ID">
                                Delete
                            </a>
                        </td>
                    </tr>
                }
                if (User.IsInRole("Driver"))
                {
                    if (item.Status == "Warehouse" || item.Status == "Shipped")
                    {
                        <tr class="results">
                            <td>
                                @Html.DisplayFor(modelItem => item.Number)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.ID)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.Weight)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.Length)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.Width)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.Height)
                            </td>
                            <td>
                                @Model.IsFragile(item)
                            </td>
                            <td>
                                @item.Size
                            </td>
                            <td>
                                <a class="action" asp-page="./Edit" asp-route-id="@item.ID">Edit</a>
                                <span>|</span>
                                <a class="action" asp-page="./Details" asp-route-id="@item.ID">Details</a>
                            </td>
                        </tr>
                    }
                }
                if (User.IsInRole("Employee"))
                {
                    if (item.Status == "Warehouse" || item.Status == "Shipped")
                    {
                        <tr class="results">
                            <td>
                                @Html.DisplayFor(modelItem => item.Number)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.ID)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.Weight)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.Length)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.Width)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.Height)
                            </td>
                            <td>
                                @Model.IsFragile(item)
                            </td>
                            <td>
                                @item.Size
                            </td>
                            <td>
                                <a class="action" asp-page="./Edit" asp-route-id="@item.ID">Edit</a>
                                <span>|</span>
                                <a class="action" asp-page="./Details" asp-route-id="@item.ID">Details</a>
                                <span>|</span>
                                <a class="delete" onclick="return confirm('Delete Parcel? @item.ID')"
                                   asp-page="./Delete" asp-route-id="@item.ID">
                                    Delete
                                </a>
                            </td>
                        </tr>
                    }
                }
            }
        </tbody>
    </table>
    <div class="container">
        <div id="pagination-wrapper" style="display: none"></div>
    </div>
</div>

<script>
    var state = {
        'page': 1,
        'row': 5
    };
    var table = ".table";

    $('#maxRows').on('change',
        function () {
            var trNum = 0;
            var maxRows = parseInt($(this).val());

            var totalRows = $(table + ' tbody tr').length;
            state.row = maxRows;
            $(table + ' tr:gt(0)').each(function () {
                trNum++;
                if (trNum > maxRows) {
                    $(this).hide();
                }
                if (trNum <= maxRows) {
                    $(this).show();
                }
            });

            pageButtons(Math.ceil(totalRows / maxRows));
        });

    function pageButtons(pages) {
        var wrapper = document.getElementById('pagination-wrapper');
        wrapper.innerHTML = '';
        wrapper.style.visibility = "hidden";
        if (pages === 1) {
            return;
        }
        wrapper.style.visibility = "visible";
        var sum = 0;
        for (var page = 1; page <= pages; page++) {
            wrapper.style.display = "block";
            wrapper.innerHTML += `<button value=${page} class="page btn btn-sm btn-info">${page}</button>`;
        }
        var test = document.getElementsByClassName("btn");

        for (var i = 1; i < test.length; i++) {
            sum += parseInt(test[i].offsetWidth);
        }
        sum += 30;
        wrapper.style.width = sum + "px";
        $('.page').on('click',
            function () {
                $('#table-body').empty();

                state.page = Number($(this).val());
                var trIndex = 0;
                $(table + ' tr:gt(0)').each(function () {
                    trIndex++;
                    if (trIndex > (state.row * state.page) || trIndex <= ((state.row * state.page) - state.row)) {
                        $(this).hide();
                    } else {
                        $(this).show();
                    }
                });
            });

    }

    function sortTableByColumn(table, column, asc = true) {
        var dirModifier = asc ? 1 : -1;
        var tBody = table.tBodies[0];
        var rows = Array.from(tBody.querySelectorAll("tr"));

        // Sort each row


        var sortedRows = rows.sort((a, b) => {
            var aColText = a.querySelector(`td:nth-child(${column + 1})`).textContent.trim();
            var aLetter = /\d/.test(aColText);
            if (aLetter === true) {
                aColText = Number(aColText);
            }
            var bColText = b.querySelector(`td:nth-child(${column + 1})`).textContent.trim();
            var bLetter = /\d/.test(bColText);
            if (bLetter === true) {
                bColText = Number(bColText);
            }
            return aColText > bColText ? (1 * dirModifier) : (-1 * dirModifier);
        });

        // Remove all existing TRs from the table
        while (tBody.firstChild) {
            tBody.removeChild(tBody.firstChild);
        }

        // Re-add the newly sorted rows
        tBody.append(...sortedRows);

        // Remember how the column is currently sorted
        table.querySelectorAll("th").forEach(th => th.classList.remove("th-sort-asc", "th-sort-desc"));
        table.querySelector(`th:nth-child(${column + 1})`).classList.toggle("th-sort-asc", asc);
        table.querySelector(`th:nth-child(${column + 1})`).classList.toggle("th-sort-desc", !asc);
    }

    document.querySelectorAll(".table th").forEach(headerCell => {
        headerCell.addEventListener("click",
            () => {
                var tableElement = headerCell.parentElement.parentElement.parentElement;
                var headerIndex = Array.prototype.indexOf.call(headerCell.parentElement.children, headerCell);
                var currentIsAscending = headerCell.classList.contains("th-sort-asc");

                sortTableByColumn(tableElement, headerIndex, !currentIsAscending);
            });
    });

</script>